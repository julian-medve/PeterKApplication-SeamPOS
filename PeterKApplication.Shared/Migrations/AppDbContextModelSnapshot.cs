// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PeterKApplication.Shared.Data;

namespace PeterKApplication.Shared.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "beca8248-e776-4702-8548-38b4c1a0c260",
                            ConcurrencyStamp = "3bd1a961-adc1-4637-859f-993c708300ff",
                            Name = "OWNER",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "065c2456-ac0d-4bac-b9d9-858ff287186d",
                            ConcurrencyStamp = "4a938133-60e6-4d7f-ba57-a2d29ed74108",
                            Name = "ADMINISTRATOR",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "27196e84-d952-4c22-b8f9-0e447ab0cdb2",
                            ConcurrencyStamp = "766966de-2336-412f-bae4-e5888093f14f",
                            Name = "AGENT",
                            NormalizedName = "AGENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AgentCode");

                    b.Property<Guid?>("BusinessId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CountryCode");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<byte[]>("Image");

                    b.Property<bool>("IsAutoSyncEnabled");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSynced");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Pin");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.Business", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AliasId");

                    b.Property<Guid?>("BusinessDocumentImageId");

                    b.Property<Guid?>("BusinessLocationId");

                    b.Property<Guid?>("BusinessSetupId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<Guid?>("ImageId");

                    b.Property<bool>("IsAdded");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSynced");

                    b.Property<bool>("IsVerified");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<Guid?>("OwnersDocumentImageId");

                    b.Property<Guid?>("PaymentPlanId");

                    b.HasKey("Id");

                    b.HasIndex("BusinessDocumentImageId");

                    b.HasIndex("BusinessLocationId");

                    b.HasIndex("BusinessSetupId");

                    b.HasIndex("ImageId");

                    b.HasIndex("OwnersDocumentImageId");

                    b.HasIndex("PaymentPlanId");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.BusinessBusinessCategory", b =>
                {
                    b.Property<Guid>("BusinessId");

                    b.Property<Guid>("BusinessCategoryId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<Guid>("Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSynced");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.HasKey("BusinessId", "BusinessCategoryId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("BusinessCategoryId");

                    b.ToTable("BusinessBusinessCategories");
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.BusinessCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSynced");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("BusinessCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74dc9a1b-9a60-4232-8244-2797a884dfb5"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Automotive"
                        },
                        new
                        {
                            Id = new Guid("16385f89-a49b-401d-a261-da315d19f31b"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Bars & Restaurants"
                        },
                        new
                        {
                            Id = new Guid("68987eb6-ff39-4992-a11d-f907420b0767"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Business Services"
                        },
                        new
                        {
                            Id = new Guid("a93c015f-8be6-43a0-a0b5-5a39900263ea"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Construction (Hardware)"
                        },
                        new
                        {
                            Id = new Guid("4391e7f7-1b1e-47ff-8ae3-bb43d47744ea"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Retail"
                        },
                        new
                        {
                            Id = new Guid("fbd5109a-cea1-4834-8d13-4536e0496c6c"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Supermarket"
                        },
                        new
                        {
                            Id = new Guid("cb8ecfab-767d-4ad4-87b1-a0ca1a8d15dc"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "General Store"
                        });
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.BusinessLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSynced");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("BusinessLocations");

                    /*b.HasData(
                        new
                        {
                            Id = new Guid("00d7748d-fedb-4b62-88ee-79eb568031cf"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Physical"
                        },
                        new
                        {
                            Id = new Guid("e14d0527-7baf-4c70-9dc1-1f3ddc264287"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Online"
                        });*/
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.BusinessPaymentType", b =>
                {
                    b.Property<Guid?>("BusinessId");

                    b.Property<Guid>("PaymentTypeId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<Guid>("Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSynced");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.HasKey("BusinessId", "PaymentTypeId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("BusinessPaymentTypes");
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.BusinessRetailSubcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BusinessId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSynced");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<Guid>("RetailSubcategoryId");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("RetailSubcategoryId");

                    b.ToTable("BusinessRetailSubcategories");
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.BusinessSetup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSynced");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("BusinessSetups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d427dd85-38bb-474c-bf19-07d76a851f60"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Sole Proprietor"
                        },
                        new
                        {
                            Id = new Guid("5f4a338f-c73b-45c8-857d-a717dfcd096a"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Partnership"
                        },
                        new
                        {
                            Id = new Guid("a8f8e301-a325-4029-b853-6c8791e562f6"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Limited Company"
                        });
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CouponType")
                        .IsRequired();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSynced");

                    b.Property<int?>("Limit");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<Guid>("ProductCategoryId");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.ImageModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<byte[]>("ImageData");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSynced");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.HasKey("Id");

                    b.ToTable("ImageModels");
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.KnowledgeBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<Guid?>("ImageId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSynced");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Title");

                    b.Property<string>("VideoUri");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasFilter("[Title] IS NOT NULL");

                    b.ToTable("KnowledgeBases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("545bbf8e-a850-4b1e-8041-4ffc72a4bba9"),
                            Description = "Description text",
                            IsDeleted = false,
                            IsSynced = false,
                            Title = "Test"
                        });
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.MPesaTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BillRefNumber");

                    b.Property<string>("BusinessShortCode");

                    b.Property<string>("FirstName");

                    b.Property<string>("InvoiceNumber");

                    b.Property<string>("Json");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("Msisdn");

                    b.Property<string>("OrgAccountBalance");

                    b.Property<string>("ThirdPartyTransId");

                    b.Property<string>("TransAmount");

                    b.Property<string>("TransId")
                        .IsRequired();

                    b.Property<string>("TransTime");

                    b.Property<string>("TransactionType");

                    b.HasKey("Id");

                    b.ToTable("MPesaTransactions");
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppUserId");

                    b.Property<Guid?>("BusinessId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("DeliveryAddress");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSynced");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<long>("OrderNumber");

                    b.Property<string>("OrderStatus")
                        .IsRequired();

                    b.Property<DateTime>("OrderedOn");

                    b.Property<Guid>("PaymentTypeId");

                    b.Property<DateTime?>("ShippedOn");

                    b.Property<string>("TransactionNumber");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSynced");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<Guid>("OrderId");

                    b.Property<decimal>("Price");

                    b.Property<Guid>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.PaymentPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdditionalStaff");

                    b.Property<decimal>("CloudSyncMBs");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSynced");

                    b.Property<int>("Locations");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<decimal>("PaymentOption");

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.ToTable("PaymentPlans");
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.PaymentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSynced");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25fa086b-5288-443b-b157-a0f6e748cbf0"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Cash"
                        },
                        new
                        {
                            Id = new Guid("3d8702a0-a604-4139-8bd6-66fe76080064"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "mPesa"
                        },
                        new
                        {
                            Id = new Guid("70376e3b-012b-45f7-894c-bfb77c8f0414"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "mVisa"
                        },
                        new
                        {
                            Id = new Guid("cab752fd-1ec7-4aa4-9493-3a7527032084"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Cheque"
                        },
                        new
                        {
                            Id = new Guid("d2ec5a91-a99e-46fc-942a-4a36b3173456"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Bank Transfer"
                        });
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BusinessId");

                    b.Property<decimal>("Cost");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<Guid?>("ImageModelId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSynced");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<Guid>("ProductCategoryId");

                    b.Property<int>("StockQuantity");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("ImageModelId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BusinessId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSynced");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.RetailSubcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSynced");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("RetailSubcategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5246cf01-468e-4861-ab37-13dc1232cc1f"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Car Accessories"
                        },
                        new
                        {
                            Id = new Guid("a154d280-3627-46d4-a8d0-c3a698b8e578"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Garage"
                        },
                        new
                        {
                            Id = new Guid("d50d730d-be27-4055-82e7-83a469b4e3fa"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Printing"
                        },
                        new
                        {
                            Id = new Guid("39a09a44-2be2-4a28-863e-5b6d237ffa28"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Computer Services"
                        },
                        new
                        {
                            Id = new Guid("f38992c0-cff5-4267-a4c5-7aefaa284e31"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Apparels Clothes"
                        },
                        new
                        {
                            Id = new Guid("1805bd8b-48b7-4e03-8677-c05732194d1d"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Computer Accessories"
                        },
                        new
                        {
                            Id = new Guid("1ac64278-6cdb-4303-b8e8-c23f865f7d70"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = new Guid("0655627c-cff5-42a1-b3a3-0d99c7aa288a"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Education And Books"
                        },
                        new
                        {
                            Id = new Guid("a4fd1d1e-d92f-4e2b-b1d4-5dc44ebe0815"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Mobile Phones And Accessories"
                        },
                        new
                        {
                            Id = new Guid("8298309b-3d3b-4c03-8bf3-1f4d4b14d870"),
                            IsDeleted = false,
                            IsSynced = false,
                            Name = "Home And Furniture"
                        });
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.Sync", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BusinessId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<long>("DataAmount");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSynced");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<DateTime>("SyncedOn");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Syncs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PeterKApplication.Shared.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PeterKApplication.Shared.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PeterKApplication.Shared.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PeterKApplication.Shared.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.AppUser", b =>
                {
                    b.HasOne("PeterKApplication.Shared.Models.Business", "Business")
                        .WithMany("AppUsers")
                        .HasForeignKey("BusinessId");
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.Business", b =>
                {
                    b.HasOne("PeterKApplication.Shared.Models.ImageModel", "BusinessDocumentImage")
                        .WithMany()
                        .HasForeignKey("BusinessDocumentImageId");

                    b.HasOne("PeterKApplication.Shared.Models.BusinessLocation", "BusinessLocation")
                        .WithMany("Businesses")
                        .HasForeignKey("BusinessLocationId");

                    b.HasOne("PeterKApplication.Shared.Models.BusinessSetup", "BusinessSetup")
                        .WithMany("Businesses")
                        .HasForeignKey("BusinessSetupId");

                    b.HasOne("PeterKApplication.Shared.Models.ImageModel", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("PeterKApplication.Shared.Models.ImageModel", "OwnersDocumentImage")
                        .WithMany()
                        .HasForeignKey("OwnersDocumentImageId");

                    b.HasOne("PeterKApplication.Shared.Models.PaymentPlan", "PaymentPlan")
                        .WithMany()
                        .HasForeignKey("PaymentPlanId");
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.BusinessBusinessCategory", b =>
                {
                    b.HasOne("PeterKApplication.Shared.Models.BusinessCategory", "BusinessCategory")
                        .WithMany("BusinessBusinessCategories")
                        .HasForeignKey("BusinessCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PeterKApplication.Shared.Models.Business", "Business")
                        .WithMany("BusinessBusinessCategories")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.BusinessPaymentType", b =>
                {
                    b.HasOne("PeterKApplication.Shared.Models.Business", "Business")
                        .WithMany("BusinessPaymentTypes")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PeterKApplication.Shared.Models.PaymentType", "PaymentType")
                        .WithMany("BusinessesPaymentTypes")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.BusinessRetailSubcategory", b =>
                {
                    b.HasOne("PeterKApplication.Shared.Models.Business", "Business")
                        .WithMany("BusinessRetailSubcategories")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PeterKApplication.Shared.Models.RetailSubcategory", "RetailSubcategory")
                        .WithMany("BusinessRetailSubcategories")
                        .HasForeignKey("RetailSubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.Coupon", b =>
                {
                    b.HasOne("PeterKApplication.Shared.Models.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.KnowledgeBase", b =>
                {
                    b.HasOne("PeterKApplication.Shared.Models.ImageModel", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.Order", b =>
                {
                    b.HasOne("PeterKApplication.Shared.Models.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("AppUserId");

                    b.HasOne("PeterKApplication.Shared.Models.Business", "Business")
                        .WithMany("Orders")
                        .HasForeignKey("BusinessId");

                    b.HasOne("PeterKApplication.Shared.Models.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.OrderItem", b =>
                {
                    b.HasOne("PeterKApplication.Shared.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PeterKApplication.Shared.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.Product", b =>
                {
                    b.HasOne("PeterKApplication.Shared.Models.Business", "Business")
                        .WithMany("Products")
                        .HasForeignKey("BusinessId");

                    b.HasOne("PeterKApplication.Shared.Models.ImageModel", "ImageModel")
                        .WithMany()
                        .HasForeignKey("ImageModelId");

                    b.HasOne("PeterKApplication.Shared.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.ProductCategory", b =>
                {
                    b.HasOne("PeterKApplication.Shared.Models.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId");
                });

            modelBuilder.Entity("PeterKApplication.Shared.Models.Sync", b =>
                {
                    b.HasOne("PeterKApplication.Shared.Models.Business", "Business")
                        .WithMany("Syncs")
                        .HasForeignKey("BusinessId");
                });
#pragma warning restore 612, 618
        }
    }
}
